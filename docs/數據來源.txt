● 分析完這兩個檔案後，我可以告訴你年度統計功能是從哪個元素表格提取建立日期做統計的：

  數據來源

  年度統計功能從 Vue 表格組件 中提取資料，具體來源是：

  inject.js:4-8 - 獲取表格數據：
  const table = document.querySelector('.vxe-table');
  let vue = table?.__vue__;
  let safety = 20;
  while (vue && !vue.tableFullData && safety-- > 0) vue = vue.$parent;
  const data = vue.tableFullData;

  統計的日期欄位

  inject.js:16-28 - CreateDate 欄位統計：
  const raw = row.CreateDate;
  const str = typeof raw === 'string' ? raw : raw?.toISOString?.() ?? '';
  const ym = str.slice(0, 7);  // 年月格式：YYYY-MM
  const date = str.slice(0, 10); // 日期格式：YYYY-MM-DD

  inject.js:31-37 - EndDate 欄位統計：
  const endDateRaw = row.EndDate;
  const endDateStr = typeof endDateRaw === 'string' ? endDateRaw : endDateRaw?.toISOString?.() ?? '';
  const endDateYm = endDateStr.slice(0, 7);

  統計類型

  從 content.js:314-366 可以看到四種統計：

  1. 建立月份 - 使用 CreateDate 欄位（商品建立時間）
  2. 建立日期 - 使用 CreateDate 欄位（商品建立時間）
  3. 年度統計 - 使用 CreateDate 欄位（商品建立時間）
  4. 結束月份 - 使用 EndDate 欄位（拍賣結束時間）

  所以統計功能是從頁面上的 .vxe-table 表格元素中的 Vue 組件數據 tableFullData 提取 CreateDate 和 EndDate
  這兩個日期欄位來進行統計分析。

> 幫我寫一個chrome能用的控制台程式，確定一下 tableFullData所提供完整的欄位標題

● // Chrome 控制台程式 - 檢查 tableFullData 完整欄位
  (function() {
      console.log('🔍 開始檢查 tableFullData 的完整欄位...');

      // 尋找 vxe-table 元素
      const table = document.querySelector('.vxe-table');
      if (!table) {
          console.error('❌ 未找到 .vxe-table 元素');
          return;
      }

      console.log('✅ 找到 vxe-table 元素');

      // 獲取 Vue 實例
      let vue = table.__vue__;
      if (!vue) {
          console.error('❌ 未找到 Vue 實例');
          return;
      }

      // 向上查找包含 tableFullData 的父組件
      let safety = 20;
      while (vue && !vue.tableFullData && safety-- > 0) {
          vue = vue.$parent;
      }

      if (!vue || !vue.tableFullData) {
          console.error('❌ 未找到 tableFullData');
          return;
      }

      const data = vue.tableFullData;
      console.log('✅ 找到 tableFullData，共有', data.length, '筆資料');

      if (data.length === 0) {
          console.warn('⚠️ tableFullData 為空陣列');
          return;
      }

      // 分析所有欄位
      const allFields = new Set();
      const fieldTypes = {};
      const fieldSamples = {};

      data.forEach((row, index) => {
          Object.keys(row).forEach(key => {
              allFields.add(key);

              // 記錄欄位類型
              const value = row[key];
              const type = value === null ? 'null' :
                          value === undefined ? 'undefined' :
                          Array.isArray(value) ? 'array' :
                          typeof value;

              if (!fieldTypes[key]) {
                  fieldTypes[key] = new Set();
              }
              fieldTypes[key].add(type);

              // 記錄樣本值（只記錄前3個非空值）
              if (value !== null && value !== undefined && value !== '') {
                  if (!fieldSamples[key]) {
                      fieldSamples[key] = [];
                  }
                  if (fieldSamples[key].length < 3) {
                      fieldSamples[key].push(value);
                  }
              }
          });
      });

      // 輸出結果
      console.log('\n📊 完整欄位分析報告');
      console.log('='.repeat(80));
      console.log(`總共找到 ${allFields.size} 個欄位\n`);

      // 按字母順序排列欄位
      const sortedFields = Array.from(allFields).sort();

      sortedFields.forEach((field, index) => {
          const types = Array.from(fieldTypes[field]).join(', ');
          const samples = fieldSamples[field] || ['(無有效值)'];
          const sampleStr = samples.map(s => {
              if (typeof s === 'string' && s.length > 50) {
                  return s.substring(0, 47) + '...';
              }
              return typeof s === 'object' ? JSON.stringify(s).substring(0, 50) : String(s);
          }).join(' | ');

          console.log(`${(index + 1).toString().padStart(3)}. ${field.padEnd(20)} [${types}]`);
          console.log(`     樣本值: ${sampleStr}\n`);
      });

      // 特別檢查日期相關欄位
      console.log('\n📅 日期相關欄位詳細分析');
      console.log('='.repeat(50));

      const dateFields = sortedFields.filter(field =>
          field.toLowerCase().includes('date') ||
          field.toLowerCase().includes('time') ||
          field.toLowerCase().includes('create') ||
          field.toLowerCase().includes('modify') ||
          field.toLowerCase().includes('update') ||
          field.toLowerCase().includes('start') ||
          field.toLowerCase().includes('end')
      );

      if (dateFields.length > 0) {
          dateFields.forEach(field => {
              console.log(`🗓️  ${field}:`);
              // 顯示前5個樣本值
              const samples = data.slice(0, 5).map(row => row[field]).filter(v => v);
              samples.forEach((sample, i) => {
                  console.log(`   ${i + 1}. ${sample}`);
              });
              console.log('');
          });
      } else {
          console.log('未找到明顯的日期欄位');
      }

      // 輸出原始數據供進一步檢查
      console.log('\n💾 完整欄位清單（供複製使用）');
      console.log('='.repeat(50));
      console.log(JSON.stringify(sortedFields, null, 2));

      // 將資料存到全域變數供後續檢查
      window.__tableAnalysis = {
          data: data,
          fields: sortedFields,
          fieldTypes: fieldTypes,
          fieldSamples: fieldSamples,
          dateFields: dateFields
      };

      console.log('\n✅ 分析完成！資料已存儲到 window.__tableAnalysis');
      console.log('💡 可以使用 window.__tableAnalysis.data[0] 查看第一筆完整資料');

  })();